<?php

use think\Db;
use Silie\Model\Admin\User;
use Silie\Validate\Admin\UserValidate;

class UserController extends AdminBase{
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
    }


    public function admin_userAction(){
        $this->displays();
    }


    public function admin_user_dataAction(){
        $params = input();
        $params['user_type'] = 1;
        $data = User::getList($params);
        api_success('获取成功',$data);
    }

    public function admin_user_editAction(){
        if(IS_POST){
            $data = input('post.');
            if(get_current_admin_id()!=1&&$data['role_id'] == 1){
                api_error('非创建者无法创建管理员');
            }
            $vali = new UserValidate();
            if($data['id']){
                if(!$vali->scene('edit')->check($data)){
                    api_error($vali->getError());
                }
                if(empty($data['user_pass'])){
                    unset($data['user_pass']);
                }else{
                    $data['user_pass'] = md5_password($data['user_pass']);
                }
            }else{
                if(!$vali->scene('add')->check($data)){
                    api_error($vali->getError());
                }
                $data['user_pass'] = md5_password($data['user_pass']);
            }
            $result = User::edit($data);
            if($result!==false){
                DB::name("role_user")->where("user_id", $data['id'])->delete();
                DB::name("role_user")->insert(["role_id" => $data['role_id'], "user_id" => $data['id']]);
                api_success('操作成功！');
            }else{
                api_error('操作失败！');
            }
        }
        $id = input('get.id');
        if($id){
            $info = Db::name('user')->alias('u')->field('u.*,ru.role_id')->where('u.id',$id)->leftJoin('__ROLE_USER__ ru','ru.user_id = u.id')->find();
            $this->getView()->assign('info',$info);
        }
        $roles = Db::name('role')->where('status',1)->select();
        $this->getView()->assign('roles',$roles);
        $this->displays();
    }

    public function admin_user_deleteAction(){
        $id = input('get.id');
        if ($id == 1) {
            api_error('最高管理员不能删除！');
        }
        if (Db::name('user')->delete($id) !== false) {
            Db::name('third_party_user')->where('user_id',$id)->delete();
            Db::name("role_user")->where("user_id", $id)->delete();
            api_success('删除成功！');
        } else {
            api_error('删除失败！');
        }
    }

    public function admin_user_statusAction(){
        $data = input();
        if(!empty($data['id'])){
            $result = Db::name('user')->where("id",$data['id'])->setField('user_status',$data['status']);
            if($result !== false){
                api_success('操作成功！');
            }else{
                api_error('操作失败！');
            }
        }else{
            api_error('数据错误！');
        }
    }



    /**
      * Author: silie
      * Date: 2020-12-16 16:31:26
      * Description: 检测密码
      */
    public function check_passAction(){
        $password = input('password');
        $user_pass = Db::name('user')->where('id',get_current_admin_id())->value('user_pass');
        if(md5_password($password)==$user_pass){
            api_success('密码正确');
        }else{
            api_error('密码错误');
        }
    }

    public function user_infoAction(){
        if(IS_POST){
            $data = input('post.');
            $where = array('id'=> get_current_admin_id());
            $model = new User();
            $result = $model->allowField(true)->save($data,$where);
            if($result){
                api_success('修改成功');
            }else{
                api_error('修改失败');
            }
        }
        $this->displays();
    }


    public function memberAction(){
        $sex_type = array('保密','男','女');
        $this->getView()->assign('sex_type',json_encode($sex_type));
        $this->displays();
    }

    public function member_dataAction(){
        $params = input();
        $params['user_type'] = 2;
        $data = User::getList($params);
        foreach ($data['list'] as &$v){
            if($v['forbid_publish'] == 1){
                $v['forbid_text'] = strtotime($v['release_datetime'])>time()?strtotime($v['release_datetime'])-time():0/86400;
                $v['forbid_text'] .= '天'.'('.$v['forbid_excuse'].')';
            }else{
                $v['forbid_text'] = "正常";
            }
        }
        api_success('获取成功',$data);
    }

    public function member_statusAction(){
        $data = input();
        if(!empty($data['id'])){
            $result = Db::name('user')->where("id",$data['id'])->setField('user_status',$data['status']);
            if($result !== false){
                api_success('操作成功！');
            }else{
                api_error('操作失败！');
            }
        }else{
            api_error('数据错误！');
        }
    }

    public function member_forbidpublishAction(){
        if(IS_POST){
            $data = input('post.');
            $data['forbid_publish'] = 1;
            $data['forbid_time'] = date('Y-m-d H:i:s');
            $data['release_datetime'] = date('Y-m-d H:i:s',$data['forbid_num']*24*60*60 + time());
            $result = Db::name('user')->update($data);
            if($result!==false){
                api_success('禁言用户成功！');
            }else{
                api_error('禁言用户失败！');
            }
        }
        $this->getView()->assign('id',input('get.id'));
        $this->displays();
    }


    public function member_delAction(){
        $id = input('get.id');
        $res1 = Db::name('user')->delete($id);
        $res2 = Db::name('third_party_user')->where('user_id',$id)->delete();
        if ($res1 && $res2) {
            api_success('删除成功！');
        } else {
            api_error('删除失败！');
        }
    }


    public function robot_indexAction(){
        $sex_type = array('保密','男','女');
        $this->getView()->assign('sex_type',json_encode($sex_type));
        $this->displays();
    }

    public function robot_dataAction(){
        $params = input();
        $params['user_type'] = 4;
        $data = User::getList($params);
        api_success('获取成功',$data);
    }

    public function robot_editAction(){
        if (IS_POST) {
            $data = input('post.');
            $vali = new UserValidate();
            $data['user_type'] = 4;
            if (!$vali->scene('robotEdit')->check($data)) {
                api_error($vali->getError());
            }
            //更新表
            $result = User::edit($data);
            if ($result !== false) {
                api_success('操作成功！');
            } else {
                api_error('操作失败！');
            }
        }
        $id = input('get.id');
        if ($id) {
            $info = User::detail($id);
            $this->getView()->assign('info',$info);
        }
        $this->displays();
    }

    public function robot_delAction(){
        $params = input();
        $result = User::del($params);
        if ($result) {
            api_success('删除成功！');
        } else {
            api_error('删除失败！');
        }
    }



}